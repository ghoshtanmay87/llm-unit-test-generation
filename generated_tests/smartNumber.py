MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1]

import pytest

def test_smartNumber_first_number():
    # Find the 1st number in the sequence generated by smartNumber
    n = 1
    expected = 6
    assert smartNumber(n) == expected

def test_smartNumber_second_number():
    # Find the 2nd number in the sequence generated by smartNumber
    n = 2
    expected = 12
    assert smartNumber(n) == expected

def test_smartNumber_third_number():
    # Find the 3rd number in the sequence generated by smartNumber
    n = 3
    expected = 18
    assert smartNumber(n) == expected

def test_smartNumber_tenth_number():
    # Find the 10th number in the sequence generated by smartNumber
    n = 10
    expected = 60
    assert smartNumber(n) == expected

def test_smartNumber_twentieth_number():
    # Find the 20th number in the sequence generated by smartNumber
    n = 20
    expected = 120
    assert smartNumber(n) == expected