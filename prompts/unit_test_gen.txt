You are an expert Python assistant.
Generate `pytest` unit tests based strictly on the following validated user stories in JSON format.

Guidelines:
- Do not re-evaluate the function logic.
- Treat the `expected_output` values in the user stories as correct — do not attempt to recalculate.
- Only use the function code for naming and structure (e.g., function name, parameters).
- Create one clearly named test function per scenario.
- Include necessary imports like `import pytest`.
- Do not include any import statement like `from your_module import ...`.
- Do not include the original function definition in the output — assume the function is already present in the same file.
- Ensure that all values in the "input" and "expected_output" fields are valid Python literals (e.g., strings, numbers, booleans, lists, dictionaries, or None), not code expressions or function calls. The output should be directly parsable without requiring evaluation of variables, operators, or external modules.

Each user story contains:
- scenario: Description of what is tested
- input: The function input
- expected_output: The expected return value
- reasoning: Why this output is correct

Output your test code as a valid Python module using markdown code formatting.

# User Stories (JSON):
```json
{user_stories}
```

# Python Function:
```python
{function_code}
```